class GameData{
  /** 
   * This is a game data for data processing among components as well as among p2p clients
   * Players essential data and Enemy data are stored for quick references or exchange.
   */

   constructor(){
    /**
      * Every player get a key from peerjs server and the data object contains 
      * {id: 'peer id', color: 'black', gun: 'gun1', x: 123, y: 123, angle: 1.23, health: 100, points: 0, state: 'ALIVE'}
      */
    this._players= new Map();

    /**
      * Bullets are rendered and generated by the server and send to clients
      * {id: 1234, x: 123, y: 123, angle: 123, vx:123, vy:123, owner: 'peer_id', dmg: 1, type: 'bullets', color: 'blue', state: 'visible'}
      */
    this._bullets= new Array();

    /**
      * Enemies are zombies or other NPC, also generate by server
      * {id: 1234, x: 123, y: 123, angle: 1.23, vx: 123, vy: 123, health: 100, type: 'zombie', action: 'stand', bstate: 'RESPAWN'}
      */
      this._enemies= new Array();

      /**
       * Other consumables
       * {id: 1234, x: 123, y: 123, type: 'magazine', state: 'hidden'}, {id: 1234, x: 124, y: 123, type: 'hp50', state: 'active'}
       */
      this._consumables= new Array();

      /**
       * Game map (optional)
       * - determins which map to show
       * {mapImage: 'assets/tilemaps/tds_tilesheet.png', 
       *  mapJson: 'assets/tilemaps/tds_tilesheet.json', 
       *  tileWidth: 32, 
       *  tileHeight: 32,
       *  nonCollidableLayers: ['grass', 'floor', 'roof']
       *  roofLayers: ['roof']
       * }
       */
      this._gameMap = null;
   }

   get players(){return this._players}
   set players(value){this._players = value}
   get bullets(){return this._bullets}
   set bullets(value){this._bullets = value}
   get enemies(){return this._enemies}
   set enemies(value){this._enemies = value}
   get consumables(){return this._consumables}
   set consumables(value){this._consumables = value}
   get gameMap(){return this._gameMap}

   set gameMap(value){
     this._gameMap = value;
   }

};

export default GameData;

